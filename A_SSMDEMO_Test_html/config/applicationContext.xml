<?xml version="1.0" encoding="UTF-8"?>
<beans default-autowire="byType" xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:jee="http://www.springframework.org/schema/jee"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:task="http://www.springframework.org/schema/task"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:context="http://www.springframework.org/schema/context" 
		xmlns:mvc="http://www.springframework.org/schema/mvc" 
		xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/jee
			http://www.springframework.org/schema/jee/spring-jee.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-3.0.xsd 
			http://www.springframework.org/schema/mvc 
			http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
			http://www.springframework.org/schema/task    
            http://www.springframework.org/schema/task/spring-task-3.0.xsd    
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx.xsd
			http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop.xsd">
 <!-- Spring-MVC :============================ -=====================================-= -->
   <!-- 注解扫描包 -->
    <context:component-scan base-package="com.ssm.*" />
  <!--   <import resource="classpath:springmvc-resteasy.xml"/>
	<context:component-scan base-package="com.tsb.ischool.api.*" /> -->
   <!-- 开启注解 -->
    <mvc:annotation-driven />
   <!-- 定义跳转的文件的前后缀 ，视图模式配置-->
    <bean id="viewResolver"
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
        <property name="prefix" value="/" />
        <property name="suffix" value=".jsp" />
    </bean>
    <!-- Spring-MVC :============================ ====================================-= -->
 	<!--  <bean id="dataSource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/ssm_test" />
        <property name="username" value="root" />
        <property name="password" value="root" />
    </bean> -->
    <!-- ==将数据连接信息配置在tomcat中 -============================================== -->
	<!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
		    <value>java:comp/env/jdbc/mysql_01</value>
		</property>
		 <property name="resourceRef"><value>true</value></property>
	</bean>   -->
	<!-- 多数据源配置 ================================================================= -->
	<bean id="readDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
		    <value>java:comp/env/jdbc/mysql_01</value>
		</property>
		 <property name="resourceRef"><value>true</value></property>
	</bean>  
	<bean id="writeDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
		    <value>java:comp/env/jdbc/mysql_02</value>
		</property>
		 <property name="resourceRef"><value>true</value></property>
	</bean> 
	<!-- 指定读库写库=readWriteDataSource================================================= -->
	<bean id="readWriteDataSource" class="com.ssm.datasource.ReadWriteDataSource">
		<!-- 通过writeDataSource指定写库 -->
		<property name="writeDataSource" ref="writeDataSource"/>
		<!-- 通过readDataSourceMap指定从库列表 --> 
		<!-- 从库列表默认通过顺序轮询来使用读库 --> 
		<property name="readDataSourceMap">  
	       <map>  
	       	  <!-- 指定其中一个从库 -->
	          <entry key="readDataSource" value-ref="readDataSource"/>  
	       </map>  
    </property>  
	</bean>
	<!-- XML事务属性配置================================================================= -->
	<!-- 所有读方法必须是read-only（必须，以此来判断是否是读方法）  -->
	<tx:advice id="txAdvice" transaction-manager="txManager">  
    <tx:attributes>  
        <tx:method name="save*" propagation="REQUIRED" />  
        <tx:method name="add*" propagation="REQUIRED" />  
        <tx:method name="create*" propagation="REQUIRED" />  
        <tx:method name="insert*" propagation="REQUIRED" />  
        <tx:method name="update*" propagation="REQUIRED" />  
        <tx:method name="merge*" propagation="REQUIRED" />  
        <tx:method name="del*" propagation="REQUIRED" />  
        <tx:method name="remove*" propagation="REQUIRED" />  
          
        <tx:method name="put*" read-only="true"/>  
        <tx:method name="query*" read-only="true"/>  
        <tx:method name="use*" read-only="true"/>  
        <tx:method name="get*" read-only="true" />  
        <tx:method name="count*" read-only="true" />  
        <tx:method name="find*" read-only="true" />  
        <tx:method name="list*" read-only="true" />  
        <tx:method name="*" propagation="REQUIRED"/>  
    </tx:attributes>  
	</tx:advice>   
	<!--事务管理器==================================================================== -->
	<!--事务管理器管理的是readWriteDataSource  -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
        <property name="dataSource" ref="readWriteDataSource"/>  
    </bean> 
	<!--读/写动态数据库选择处理器====================================================== -->
	<!-- 根据之前的txAdvice配置的事务属性决定是读/写，具体参考javadoc -->
	<!-- forceChoiceReadWhenWrite：用于确定在如果目前是写（即开启了事务）， -->
	<!-- 下一步如果是读，是直接参与到写库进行读，还是强制从读库读 -->
	<bean id="readWriteDataSourceTransactionProcessor" class="com.ssm.datasource.ReadWriteDataSourceProcessor">  
    	<property name="forceChoiceReadWhenWrite" value="false"/>  
	</bean>  
	<!--5、事务切面和读/写库选择切面====================================================== -->
	<aop:config expose-proxy="true">  
    <!-- 只对业务逻辑层实施事务 -->  
    <aop:pointcut id="txPointcut" expression="execution(* com.ssm.service..*.*(..))" />  
    <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>  
    <!-- 通过AOP切面实现读/写库选择 -->  
    <aop:aspect order="-2147483648" ref="readWriteDataSourceTransactionProcessor">  
       <aop:around pointcut-ref="txPointcut" method="determineReadOrWriteDB"/>  
    </aop:aspect>  
	</aop:config>  
	<!-- 1、事务切面一般横切业务逻辑层；
		2、此处我们使用readWriteDataSourceTransactionProcessor的通过AOP切面实现读/写库选择功能，
		order=Integer.MIN_VALUE(即最高的优先级)，从而保证在操作事务之前已经决定了使用读/写库。
		6、测试用例
		只要配置好事务属性（通过read-only=true指定读方法）即可，
		其他选择读/写库的操作都交给readWriteDataSourceTransactionProcessor完成。
	 -->
	<!-- mybatis的SqlSession的工厂========================================================== -->
    <!-- SqlSessionFactoryBean dataSource:引用数据源， MyBatis定义数据源,同意加载配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	  <!-- <property name="dataSource" ref="dataSource" /> -->
	  <property name="dataSource" ref="readWriteDataSource" />
	  <property name="configLocation" value="classpath:config/mybatis-config.xml"></property>
	  <!--当mybatis的xml文件和mapper接口不在相同包下时，需要用mapperLocations属性指定xml文件的路径。  
         *是个通配符，代表所有的文件，**代表所有目录下 -->   
      <!--此时spring是通过识别mapper.xml中的 
      <mapper namespace="com.fan.mapper.UserDao"> namespace的值来确定对应的Mapper.class的。  -->  
	  <!-- <property name="mapperLocations" value="classpath*:mapper/*Mapper.xml" /> -->
	  <property name="mapperLocations" value="classpath:com/ssm/mapper/*Mapper.xml" /><!-- 或为*.xml -->
	   <!-- <property name="configurationProperties">
	  	<value>
	  		dialect=mysql
	  	</value>
	  </property>-->
	<!--  <property name="plugins"> -->
	  <!-- 	<list> -->
	  	<!-- 	<bean class="com.tsb.ischool.api.interceptor.DiclectStatementHandlerInterceptor"></bean> -->
	  		<!-- <bean class="com.tsb.resteasy.util.PowerSqlInterceptor"></bean> -->
	  		<!-- <bean class="com.tsb.resteasy.commons.utils.DiclectResultSetHandlerInterceptor"></bean> -->
	  <!-- 	</list> -->
	<!--   </property> -->
	</bean> 
	<!-- <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
  		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean> -->
	<!-- 拦截器配置===================================================================== -->
	<mvc:interceptors>  
        <mvc:interceptor>  
            <mvc:mapping path="/" />  
            <bean class="com.ssm.interceptor.AccessStatisticsIntceptor" />  
        </mvc:interceptor>  
    </mvc:interceptors>
    <!-- =============================================================================== -->
    <!-- 配置mybitas mapper自动扫描 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
        <property name="basePackage" value="com.ssm.dao.**" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
    <!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="configLocation" value="classpath:config/mybatis-config.xml" /> 
    </bean> -->

    <!--
        3. mybatis自动扫描加载Sql映射文件/接口 : MapperScannerConfigurer sqlSessionFactory

        basePackage:指定sql映射文件/接口所在的包（自动扫描）
    -->
    <!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ssm.mapper"></property>
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
    </bean> -->

    <!--
        4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源
    -->
    <!-- <bean id="txManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean> -->

    <!-- 5. 使用声明式事务
         transaction-manager：引用上面定义的事务管理器
     -->
    <!-- <tx:annotation-driven transaction-manager="txManager" /> -->

</beans>