-----------------------------
爬虫API：
·Requests-- 自动爬取HTML页面，进行网络提交
·robots.txt-网络爬虫排除标准
·Beautiful Soup库--解析html页面
·Project----实战项目A/B
·Re---------正则表达式库
·Scrapy*----专业网络爬虫框架、网络爬虫原理介绍

-----------------------------
python开发工具选择：
·文本工具类
	IDLE:python自带，默认，常用，入门工具
	Sublime Text：第三方专用编程工具（免费）
	Notepad++
·集成工具类
	PyCharm（社区版免费，简单，集成度高，适合较复杂工程）
	Anaconda&Spyder（开源免费：专门针对科学计算和数据分析的）
	Wing（收费专业：适用于公司，版本控制，版本同步，适合多人开发）
	PyDev&Eclipse（开源的）
	Visual Studio&PTVS（微软的）

-----------------------------
Requests库入门：www.python-requests.org
·安装：cmd-pip install requests
·测试：打开python命令窗口（shell）
	>>> import requests
	>>> r=requests.get("http://www.baidu.com")
	>>> r.status_code       //响应状态码返回
	200
	>>> r.encoding='utf8'	//编码重置
	>>> r.encoding		//Http header中猜测的响应内容编码方式
	'utf-8'			//如果header中不存在charset则认为编码为IOS-8859-1
	>>> r.text		//Http响应内容的字符串形式：url对应的页面内容
	>>> r.apparent_encoding	//内容中分析出的响应内容编码方式（备选编码方式）
	'utf-8'
	>>> r.content		//Http响应内容的二进制形式（例如图片）
·具体介绍：
1.Requests库的get()
	r=requests.get(url,pararms=NONE,**kwargs)//Response响应、Request请求	
2.爬去网页的通用代码框架：
	1.因为网络原因，所以网络异常处理也很重要
	2.常用的六种Requests库的异常：
		--1.requests.ConnectionError 网络连接错误异常，如DNS查询失败，拒绝连接等
		--2.requests.HTTPError	     http错误异常
		--3.requests.URLRequired     url缺失异常
		--4.requests.TooManyRedirects 超过最大重定向次数
		--5.requests.ConnectionTimeout 连接远程服务器超时异常
		--6.requests.Timeout	     请求url超时，产生超时异常
		--7.方法：r.raise_for_status():如果不是200产生异常requests.HTTPError	

	3.爬取网页代码框架：
	import requests
	def getHTMLText(url):
    	try:
        	r=requests.get(url,timeout=30)
        	r.raise_for_status()
        	r.encoding=r.apparent_encoding
        	return r.text
    	except:
        	return '产生异常'
	print(getHTMLText('http://www.baidu.com'))
	print('------------------------------------')
	payload={'key1':'va1','key2':'va2'}
	#r=requests.post('http://httpbin.org/post',data=payload)#自动编码为form表单、
	r=requests.post('http://httpbin.org/post',data='abc')#自动编码为form表单、
	print(r.text)

	#requests.request(method,url,**kwargs(其他控制访问参数))
	#method:请求方式，对应get/put/post/head/patch/delete/options等7种
	kv={'key1':'va1','key2':'va2'}
	r=requests.request('GET','http://httpbin.org/post',params=kv)
	print (r.url)
	#http://httpbin.org/post?key1=va1&key2=va2
3.Requests库的七个主要方法：
	--HTTP协议：超文本传输协议，基于请求与响应模式的无状态的应用层协议
	1.GET   请求获取URL位置的资源
	2.HEAD  请求获取URL位置资源的响应消息报告，获取头部信息
	3.POST  请求想url位置资源后附加的新的数据
	4.PUT   请求向url位置存储一个资源，覆盖原来url位置的资源
	5.PATCH 请求局部更新url位置的资源，改变该处资源的部分内容--可以节省网络带宽
	6.DELETE请求删除url位置存储的资源

-------------------------------------------------
two part：
	1.解析html页面信息标记与提取方法：Beautiful Soup
	2.实战项目：中国大学排名爬虫（实例）

Beautiful Soup库：解析，遍历，维护标签树的功能库
·安装：cmd -- pip install beautifulsoup4
·测试：
	演示地址：http://python123.io/ws/demo.html
	查看页面源代码：-----
	>>> import requests
	>>> r=requests.get('http://python123.io/ws/demo.html')
	>>> r.text
	>>> demo=r.text
	>>> from bs4 import BeautifulSoup
	>>> soup=BeautifulSoup(demo,'html.parser')
	#soup=BeautifulSoup(open("d://demo.html"),'html.parser')
	----tag判断-----------------------------标签】
	>>> print (soup)
	>>> print (soup.title)			#打印title标签
	>>> print (soup.a)    			#打印第一个a标签内容
	----name判断-----------------------------标签名字
	>>> print (soup.a.name)    		#打印第一个a标签名称 ‘a’
	>>> print (soup.a.parent.name)    	#打印第一个a标签的父标签的 名字
	>>> print (soup.a.parent.parent.name) 
	----attributes判断------------------------标签属性
	>>> print (soup.a.attrs) 		#打印标签的属性（字典：class/id等信息） 
  	>>> print (soup.a.attrs['class']) 	#打印标签的某个属性（类型：class/id等信息）
	>>> print (soup.p)    			#打印第一个a标签内容
	   <p class='title'><b>this is name </b></p>
	>>> print (soup.p.string) 		#打印标签的属性所在的具体内容（即<>...<>中的内容且不包含<b>标签）
	   'this is name'	  
	>>> print (type(soup.a.attrs)) 		#打印标签的属性类型（<class 'dict'>） 
	----NavigableString判断--------------------标签中非属性字符串
	>>> print (type(soup.a.string))		#打印标签的内容类型（<class 'bs4.element.NavigableString'>） 
	----comment判断----------------------------标签中字符串注释部分（特殊的comment格式）
	>>>newsoup=BeautifulSoup("<b><!-- this is a comment--></b><p>this is not a comment </p>","html.parser")
	>>>newsoup.b.string
	Out[20]: ' this is a comment'
	>>>newsoup.p.string
	Out[21]: 'this is not a comment '
	>>>type(newsoup.p.string)
	Out[22]: bs4.element.NavigableString
	>>>type(newsoup.b.string)
	Out[23]: bs4.element.Comment

·引用方式：
	1.from bs4 import BeautifulSoup
	2.import bs4
·BeautifulSoup库解析器：
	1.bs4的html解析器---BeautifulSoup(demo,'html.parser')--安装bs4库
	2.lxml的html解析器--BeautifulSoup(demo,'lxml')---------pip install lxml
	3.lxml的xml解析器---BeautifulSoup(demo,'xml')----------pip install lxml
	4.html5lib的解析器--BeautifulSoup(demo,'html5lib')-----pip install html5lib
·基本元素(五种)：tag,name,attrs,navigablestring,comment
---------------------------------------------------
·标签树的下行遍历：
	.content 子节点列表/.children/.descendants节点-- 后俩只能用在for循环中
	--------------
	>>> import requests
	>>> r=requests.get('http://python123.io/ws/demo.html')
	>>> demo=r.text
	>>> print (demo)
	<html><head><title>This is a python demo page</title></head>
	<body>
	<p class="title"><b>The demo python introduces several python courses.</b></p>
	<p class="course">Python is a wonderful general-purpose programming language. You can learn Python from 	novice to professional by tracking the following courses:
	<a href="http://www.icourse163.org/course/BIT-268001" class="py1" id="link1">Basic Python</a> and <a 	href="http://www.icourse163.org/course/BIT-1001870001" class="py2" id="link2">Advanced Python</a>.</p>
	</body></html>	
	>>> from bs4 import BeautifulSoup
	>>> soup =BeautifulSoup(demo,"html.parser")
	>>> soup.heaf
	>>> soup.head
	<head><title>This is a python demo page</title></head>
	>>> soup.head.content
	>>> soup.head.contents
	[<title>This is a python demo page</title>]
	>>> soup.body.content
	>>> soup.body.contents
	['\n', <p class="title"><b>The demo python introduces several python courses.</b></p>, '\n', <p 	class="course">Python is a wonderful general-purpose programming language. You can learn Python from 	novice to professional by tracking the following courses:
	<a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1">Basic Python</a> and <a 	class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2">Advanced Python</a>.</p>, 	'\n']
	>>> len(soup.body.contents )
	5	
	>>> soup.body.contents[1]
	<p class="title"><b>The demo python introduces several python courses.</b></p>
---------------------------------------------------
·标签树的上行遍历：
	---------------
	.parent 父标签
	>>> soup.title.parent      --存在父标签：head
	<head><title>This is a python demo page</title></head>
	>>> soup.html.parent	   --为顶级标签不显示	
	<html><head><title>This is a python demo page</title></head>
	<body>		
	<p class="title"><b>The demo python introduces several python courses.</b></p>
	<p class="course">Python is a wonderful general-purpose programming language. You can learn Python from 	novice to professional by tracking the following courses:
	<a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1">Basic Python</a> and <a 	class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2">Advanced Python</a>.</p>
	</body></html>
	>>> soup.parent		   --为空
	---------------
	.parents 所有父标签
	>>> soup.parent
	>>> for parent in soup.a.parents:
		if parent is None:
			print (parent)
		else:
			print(parent.name)

	p
	body
	html
	[document]
---------------------------------------------------
·标签树的平行遍历：
	.next_sibling       下一个
	.previous_sibling   前一个
	.next_siblings      下面所有
	.previous_siblings  之前所有
	>>> soup
	<html><head><title>This is a python demo page</title></head>
	<body>
	<p class="title"><b>The demo python introduces several python courses.</b></p>
	<p class="course">Python is a wonderful general-purpose programming language. You can learn Python from 	novice to professional by tracking the following courses:
	<a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1">Basic Python</a> and <a 	class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2">Advanced Python</a>.</p>
	</body></html>
	>>> soup.a.next_sibling
	' and '
	>>> soup.a.next_sibling.next_sibling
	<a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2">Advanced Python</a>
	>>> 
	>>> soup.a.previous_sibling
	'Python is a wonderful general-purpose programming language. You can learn Python from novice to 		professional by tracking the following courses:\r\n'
	>>> soup.a.previous_sibling.previous_sibling  --为空
	>>> for s in soup.a.next_siblings:
		print (s)
	and 
	<a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2">Advanced Python</a>
	.
---------------------------------------------------
·基于bs4的html格式输出：
	Python 3.6.4 (v3.6.4:d48eceb, Dec 19 2017, 06:04:45) [MSC v.1900 32 bit (Intel)] on win32
	Type "copyright", "credits" or "license()" for more information.
	>>> import requests
	>>> r=requests.get('http://python123.io/ws/demo.html')
	>>> r.text
	'<html><head><title>This is a python demo page</title></head>\r\n<body>\r\n<p class="title"><b>The demo 	python introduces several python courses.</b></p>\r\n<p class="course">Python is a wonderful general-	purpose programming language. You can learn Python from novice to professional by tracking the following 	courses:\r\n<a href="http://www.icourse163.org/course/BIT-268001" class="py1" id="link1">Basic Python</a> 	and <a href="http://www.icourse163.org/course/BIT-1001870001" class="py2" id="link2">Advanced 	Python</a>.</p>\r\n</body></html>'
	>>> demo=r.text
	>>> import bs4
	>>> soup=BeautifulSoup(demo,'html.parser')
	Traceback (most recent call last):
 	File "<pyshell#5>", line 1, in <module>
    	soup=BeautifulSoup(demo,'html.parser')
	NameError: name 'BeautifulSoup' is not defined
	>>> from bs4 import BeautifulSoup
	>>> soup=BeautifulSoup(demo,'html.parser')
	>>> soup.prettify
	<bound method Tag.prettify of <html><head><title>This is a python demo page</title></head>
	<body>
	<p class="title"><b>The demo python introduces several python courses.</b></p>
	<p class="course">Python is a wonderful general-purpose programming language. You can learn Python from 	novice to professional by tracking the following courses:
	<a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1">Basic Python</a> and <a 	class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2">Advanced Python</a>.</p>
	</body></html>>
	>>> soup.prettify()
		'<html>\n <head>\n  <title>\n   This is a python demo page\n  </title>\n </head>\n <body>\n  <p 		class="title">\n   <b>\n    The demo python introduces several python courses.\n   </b>\n  </p>\n  <p 		class="course">\n   Python is a wonderful general-purpose programming language. You can learn Python from 	novice to professional by tracking the following courses:\n   <a class="py1" 		href="http://www.icourse163.org/course/BIT-268001" id="link1">\n    Basic Python\n   </a>\n   and\n   <a 		class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2">\n    Advanced Python\n   		</a>\n   .\n  </p>\n </body>\n</html>'
	>>> print (soup.prettify())
	<html>
 	<head>
  	<title>
   		This is a python demo page
  	</title>
 		</head>
 <body>
  <p class="title">
   <b>
    The demo python introduces several python courses.
   </b>
  </p>
  <p class="course">
   Python is a wonderful general-purpose programming language. You can learn Python from novice to professional by tracking the following courses:
   <a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1">
    Basic Python
   </a>
   and
   <a class="py2" href="http://www.icourse163.org/course/BIT-1001870001" id="link2">
    Advanced Python
   </a>
   .
  </p>
 </body>
</html>
>>> print (soup.a.prettify())
<a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1">
 Basic Python
</a>

>>> 
---------------------------------------------
·下章：信息的标记
	--1.xml
	--2.json --有类型的键值对
	--3.yaml --无类型键值对组织信息 name:long,缩进表达所属关系
·比较：
	1.xml：拓展性好，繁琐    		--internet信息交互与传递
	2.json:信息有类型，简洁，适合程序处理	--移动应用云端和节点信息通讯，无注释
	3.yaml：信息无类型，文本信息比例高，可读性好 --各类系统的配置文件，有注释易读
·信息提取的一般方法：
	1.解析文件形式--在提取
	2.直接搜索关键字
	3.融合方法（包含前两种）
实例：提取html页面的所有url链接
	1.搜索所有的a标签
	2.解析a标签格式，获取href后的链接内容
	>>> from bs4 import BeautifulSoup
	>>> soup=BeautifulSoup(demo,'html.parser')
	>>> for link in soup.find_all('a'):
		print (link.get('href'))
	http://www.icourse163.org/course/BIT-268001
	http://www.icourse163.org/course/BIT-1001870001
·soup.find_all(name,attrs,tecursive,string,**kwargs)
	返回一个列表类型，存储查找的结果
	name：标签名称检索
		--soup.find_all('a'):检索a标签
		--soup.find_all(['a','b']):检索a,b标签
		--soup.find_all(True):显示soup的所有标签信息
		-->>> for tag in soup.find_all(True):
			print (tag.name)
		--检索名字以b开头的标签：包含b/body （需引入正则库）
		-->>> import re
		  >>> for tag in soup.find_all(re.compile('b')):
			print (tag.name)

		  body
		  b
		  >>> 
		-->>> soup.find_all('p','course')-- 检索p标签中包含course属性的标签内容
		    [<p class="course">Python is a wonderful general-purpose programming language. 
		    You can learn 		    
		    Python from novice to professional by tracking the following courses:
		-->>> soup.find_all(id='link1') 查找属性id=link1的所有内容
		   [<a class="py1" href="http://www.icourse163.org/course/BIT-268001" id="link1">
		   Basic Python</a>]

