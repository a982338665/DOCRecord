——————————————————————————————————————————————————————————————
java消息中间件：--用来处理异步消息
 ·消息发布者----公众号----推送给订阅公众号的所有人
 ·通过服务调用让其他系统感知事件发生：场景如下
    -用户登录--登录系统：
        -调用服务 短信
        -调用服务 积分
        -调用服务 日志...
 ·通过消息中间件解耦服务调用：
    -用户登录--登录系统--发送消息到=消息中间件-异步向以下服务投递消息：
        -调用服务 短信
        -调用服务 积分
        -调用服务 日志...
 ·使用优点：
    -系统解耦
    -异步
    -横向扩展
    -安全可靠
    -顺序保证
 ·中间件：不能直接给用户使用，不能诶客户带来直接价值的软件。
 ·消息中间件：关注于数据的发送和接收，利用高效可靠的异步消息传递机制集成分布式系统
 ·JMS规范(java message service)：java消息必选课程
    -是一个java平台关于面向消息中间件的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通讯
 ·AMQP(advanced message queuing protocol)：一个提供统一消息服务的应用层标准协议，基于此协议的客户端与消息中间件可传递消息，并不受客户端
    /中间件不同产品，不同开发语言等条件的限制。
——————————————————————————————————————————————————————————————
JMS和AMQP的对比：
     --                       JMS                               AMQP
    定义                      Java api                        wire-protocol
    跨语言                    否                               是
    消息类型                  提供两种消息模型p2p,pub/sub         提供五种消息模型：direct/fanout/topic/headers/system
    消息类型             TextMessage/MapMessage/BytesMessage   byte[]
                        StreamMessage/ObjectMessage/Message
    综合评价：
        --JMS定义了java api层面的标准，在java体系中，多个client均可以通过JMS进行交互，不需要应用修改代码，但是其对跨平台支持较差
        --Amqp的主要特征是面向消息，队列，路由（包括点对点和发布订阅），可靠性，安全
——————————————————————————————————————————————————————————————
常见消息中间件对比：
    -ActiveMQ:java优先（也支持AMQP协议，XMPP，Stomp，OpenWire）
        -Apache出品，最流行，能力强的开源总线
        -完全支持JMS1.1和j2ee 1.4规范的JMS Provider的实现
        -特性：
            ·支持多种语言和协议编写客户端
            ·完全支持JMS1.1和j2ee 1.4规范（持久化，XA消息，事务）
            ·虚拟主题，组合目的，队列镜像
        -优点：
            ·遵循JMS规范
            ·安装部署方便
        -缺点：
            ·据用户反馈会莫名丢失消息
            ·目前重心在下代产品apolle上，目前社区不活跃，对5.X的维护较少
        -使用场景：
            .适合中小企业级消息应用场景，不适合上千个队列的应用场景


    --RabbitMQ:语言无关
        -开源的AMQP实现，服务端用语言Erlang语言编写
        -用于在分布式系统中，存储转发消息，在易用性，拓展性，高可用等方便表现不俗
        -特性
            ·支持多种客户端
            ·AMQP的完整实现
            ·事务支持、发布确认
            ·消息持久化
        -优点：
            ·继承Erlang天生的并发性
            ·最初用于金融业，稳定性，安全性有保障
        -缺点：
            ·Erlang语言难度较大
            ·不支持动态扩展
        -使用场景：
            ·适合对稳定性要求高的企业级应用
    --Kafka：java优先（不是一个严格的消息中间件，本身是用来做日志储存的）
        -高吞吐量的分布式发布订阅消息系统
        -分布式，分区的，可靠的分布式日志存储服务
        -特性：
            -通过O(1)-时间复杂度，的磁盘数据结构提供消息的持久化
            -此结构对于以TB的消息存储也能够保持长时间的稳定性能
            -高吞吐量：非常普通的硬件Kfaka也可以支持每秒数百万的消息
            -分区，分组
        -优点：
            ·依赖zk，可动态拓展及诶单
            ·高性能，高吞吐，无限扩容，消息可指定追溯
        -缺点：
            ·严格的顺序机制，不支持消息优先级
            ·不支持标准消息协议
            ·不利于平台迁移
        -使用场景：
            ·一般用在发数据日志处理或对实时性(少量延迟)，可靠性（少量丢数据）要求稍低的场景使用
——————————————————————————————————————————————————————————————
JMS规范：
    ·提供者：实现JMS规范的消息中间件服务器 -提供服务的服务商
    ·客户端：发送或接收消息的应用程序      -主要开发此部分
    ·生产者/发布者：创建并发送消息的客户端
    ·消费者/订阅者：接收并处理消息的客户端
    ·消息：应用程序间传递的数据内容
    ·消息模式：在客户端之间传递消息的方式，JMS定义了主题和队列两种模式
消息模式：
    -队列模型：
        ·客户端包括生产者和消费者
        ·队列中的消息只能被一个消费者消费
        ·消费者可以随时消费队列中的消息
    -主题模型：
        ·客户端包括发布者和订阅者
        ·主题中的消息被所有的订阅者消费
        ·消费者不能消费订阅之前就发送的消息


———————————————————————————————————————————————————————————————
windows安装ActiveMQ：
    ·下载安装
    ·直接启动和服务启动
    ·下载地址:http://activemq.apache.org/activemq-5153-release.html
    ·解压进入G:\activeMp\apache-activemq-5.15.3-bin\apache-activemq-5.15.3\bin\win64
    ·启动：
        -以管理员身份运行(右击)：activemq.bat --以此种方式运行不能关闭黑窗口
        -以服务方式启动：
            ·以管理员身份运行：InstallService.bat
            ·在【服务】中找到ActiveMQ点击启动(也可设置为开机自启)：
                -报错：1067
                    1.修改G:\activeMp\apache-activemq-5.15.3-bin\apache-activemq-5.15.3\bin\win64下的wrapper.conf
                        wrapper.java.command=G:/aaaJDK1.8/bin/java
                -报错： Unsupported major.minor version 52.0
                    1.指的是jdk版本与此不匹配（建议使用jdk1.8）
    ·以运行结果显示的访问地址，访问主界面 默认用户密码：admin/admin
———————————————————————————————————————————————————————————————
linux安装ActiveMQ：
    ·wget http://mirror.bit.edu.cn/apache//activemq/5.15.3/apache-activemq-5.15.3-bin.tar.gz
    ·tar -zxvf apache-activemq-5.15.3-bin.tar.gz
    ·进入bin目录
    ·./activemq start
    ·ps -ef |grep activemq
    ·./activemq stop
———————————————————————————————————————————————————————————————
端口问题：
    -8161是后台管理系统:位置activemq/conf/jetty.xml
    -61616是给java用的tcp端口：位置conf/activemq.xml
———————————————————————————————————————————————————————————————
spring-jms连接activemq:
    -ConnectionFactory:管理连接的连接工厂
        -spring提供的连接池：原因-
            JmsTemplate每次发消息都会重新创建连接，会话和productor。很耗性能，所以创建连接池
        -两种连接池：
            -SingleConnectionFactory:
                应用只会产生一个连接
            -CachingConnectionFactory：继承SingleConnectionFactory
                相比以上，增加了缓存功能
    -JmsTemplate：用于发送和接受消息的模板类
        -向spring容器注册即可使用
        -线程安全，用于整个应用，可创建多个
    -MessageListerner：消息监听器
        -实现onMessage方法，该方法只接受一个Message参数

———————————————————————————————————————————————————————————————
拓展篇：
    ·ActiveMQ集群配置：
    ·消息中间件在企业中的最佳实践
    ·其他常用消息中间件使用
1.ActiveMQ集群配置:
    -集群原因：
        -实现高可用，以排除单点故障引起的服务中断
        -实现负载均衡，以提升效率为更多客户提供服务
    -集群方式：
        ·服务端：
            -客户端集群：让多个消费者消费同一个队列
            -Broker clusters：多个broker之间同步消息，以达到服务器负载可能
                -原理：
                    节点A---消息同步---节点B
                    节点B---消息同步---节点A
                -实现方式：网络连接器（NetworkConnector）
                    -定义：网络连接器主要用于配置ActiveMQ服务器与服务器之间的网络通讯方式，用于服务器透传消息
                    -分类：
                        ·静态连接器：在服务器ip地址上，指定具体ip是多少
                            <networkConnectors>
                                <networkConnector uri="static:(tcp://127.0.0.1:61617;127.0.0.1:61618)"/>
                            </networkConnectors>
                            当服务器动态拓展时，就需要使用以下方式
                        ·动态连接器：
                            <networkConnectors>
                                <networkConnector uri="multicast://default"/>
                            </networkConnectors>
                            <transportConnectors>
                                <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000
                                &amp;wireFormat.maxFrameSize=104857600"
                                discoveryUri="multicast://default"
                                />
                            </transportConnectors>
            -Master Slave：实现高可用（当主消息服务器挂掉时，备用服务器接手继续提供服务）
                -方案：
                    ·未共享存储-已过时-5.8+后移除
                    ·共享存储（shared storage master/slave）：
                        -节点A 和 节点B 和 持久化(共享储存地址：数据库/文件系统)
                        -节点A,B均配置此持久化
                        -先启动节点A:排它锁独占资源成为Master-获取了服务对外开放的能力，对外提供服务
                            若A宕机，此时节点B立即获取持久化资源的排它锁，成为新的Master，
                            解析到web客户端，客户端失效转移后发送到节点B,已达成服务不间断，高可用
                        -后启动节点B:等待获取资源:此时成为slave
                    ·基于复制的levelDB store（基于ZK-ZooKeeper，至少有3台）
                        -节点A，B，C -配置同一个ZK
                        -通过Zk选举其中一个服务器作为Master （如节点A）
                        -节点A获取对外提供服务能力
                        -节点A获取web资源本地储存--通过zk同步资源给节点B和c---B，c储存资源
                        -若节点A故障，zk会重新立即选取新的master
            -两种集群对比：
                Master Slave: 高可用，无负载均衡
                Broker Cluster：无高可用(此台服务器宕机时，数据可能会同步丢失
                )，有负载均衡
            -高可用的负载均衡方案：——————————————————————————————————————
                -节点A，节点B，节点C,持久化
                -A-B之间消息同步，A-C之间消息同步，节点B获取资源成为master，节点C等待资源成为slave
                -按顺序启动节点A，B，C
            --实战配置：B,C需要同一个共享文件夹(推荐一些svn分布式文件系统)
                A: 61616 8161  -        网络连接器：B,C    消费者
                B: 61617 8162 共享文件夹  网络连接器：A      生产者、消费者
                C: 61618 8163 共享文件夹  网络连接器：A      生产者、消费者


        ·客户端：
            -ActiveMQ失效转移(failover):
                允许当其他一台消息服务器宕机时，客户端在传输层上重新连接到其他消息服务器
                语法：failover:(uri1,...,uriN)?transportOptions
                transportOptions参数说明：
                    -randomize 默认为true，表示在uri列表中选择uri连接时，是否采用随机策略
                    -initialReconnectDelay 默认10ms，表示第一次尝试重连之间的等待时间
                    -maxReconnectDelay 默认 30000ms ，最长重连的时间间隔
———————————————————————————————————————————————————————————————
高可用负载均衡方案实战配置：B,C需要同一个共享文件夹(推荐一些svn分布式文件系统)
    --1.服务准备：
        A: 61616 8161  -        网络连接器：B,C    消费者
        B: 61617 8162 共享文件夹  网络连接器：A      生产者、消费者
        C: 61618 8163 共享文件夹  网络连接器：A      生产者、消费者
    --2.配置文件：
        -配置在git中的存放位置：H:\Git\DOCRecord\DOCRecord\消息中间件-ActiveMQ\高可用负载均衡
        -修改G:\activeMp\apache-activemq-5.15.3-bin\activemq-A\conf
                    ·activemq.xml
                    ·jetty.xml
        -A:
          -activemq.xml
                    <transportConnectors>
                        <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
                        <transportConnector name="openwire" uri="tcp://0.0.0.0:61616?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                        <!--   <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                        <transportConnector name="stomp" uri="stomp://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                        <transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                        <transportConnector name="ws" uri="ws://0.0.0.0:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/> -->
                    </transportConnectors>
            		<!-- 配置网络连接器：仅作为消费者，连接B和C -->
            		<networkConnectors>
                          <networkConnector name="local_network"
                          uri="static:(127.0.0.1:61617;127.0.0.1:61618)"/>
                    </networkConnectors>

          -jetty.xml
                    <bean id="jettyPort" class="org.apache.activemq.web.WebConsolePort" init-method="start">
                        <!-- the default port number for the web console -->
                          <property name="host" value="0.0.0.0"/>
                          <property name="port" value="8161"/>
                    </bean>
        -B:
          -activemq.xml
                    <!-- 因为B节点和C节点要配置成Master/Slver:采用共享文件夹的方式，要创建一下文件夹 -->
                    <persistenceAdapter>
                          <!-- <kahaDB directory="${activemq.data}/kahadb"/> -->
                          <kahaDB directory="G:/activeMp/apache-activemq-5.15.3-bin/kahadb"/>
                    </persistenceAdapter>
                    <transportConnectors>
                          <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
                          <transportConnector name="openwire" uri="tcp://0.0.0.0:61617?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                         <!--  <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                          <transportConnector name="stomp" uri="stomp://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                          <transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                          <transportConnector name="ws" uri="ws://0.0.0.0:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/> -->
                    </transportConnectors>
                    <!-- 配置网络连接器：连接A，消息同步 -->
          			<networkConnectors>
                          <networkConnector name="network_a" uri="static:(tcp://127.0.0.1:61616)"/>
                    </networkConnectors>
          -jetty.xml
                    <bean id="jettyPort" class="org.apache.activemq.web.WebConsolePort" init-method="start">
                       <!-- the default port number for the web console -->
                           <property name="host" value="0.0.0.0"/>
                           <property name="port" value="8162"/>
                    </bean>
        -C:
          -activemq.xml
                    <!-- 因为B节点和C节点要配置成Master/Slver:采用共享文件夹的方式，要创建一下文件夹 持久化-->
                    <persistenceAdapter>
                          <!-- <kahaDB directory="${activemq.data}/kahadb"/> -->
                          <kahaDB directory="G:/activeMp/apache-activemq-5.15.3-bin/kahadb"/>
                    </persistenceAdapter>
                    <transportConnectors>
                          <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
                          <transportConnector name="openwire" uri="tcp://0.0.0.0:61618?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                         <!--  <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                          <transportConnector name="stomp" uri="stomp://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                          <transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
                          <transportConnector name="ws" uri="ws://0.0.0.0:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/> -->
                    </transportConnectors>
                    <!-- 配置网络连接器：连接A，消息同步 -->
          			<networkConnectors>
                          <networkConnector name="network_a" uri="static:(tcp://127.0.0.1:61616)"/>
                    </networkConnectors>
          -jetty.xml
                    <bean id="jettyPort" class="org.apache.activemq.web.WebConsolePort" init-method="start">
                       <!-- the default port number for the web console -->
                           <property name="host" value="0.0.0.0"/>
                           <property name="port" value="8163"/>
                    </bean>
    -测试流程：
        -1.依次启动ABC节点
            --检查启动状态：ps -ef |grep activemq
            --检查是否对外提供服务：netstat -anp|grep 61616 （对外提供服务且有本地连接）
                :::61616            :::*
                127.0.0.1:37969     127.0.0.1:61616
                127.0.0.1:61616     127.0.0.1:37969
            --检查结果：61616和61617均对外提供服务，但是61618没有，结论:此时61617获取全部共享文件夹的权限，61618等待
            --kill 61617时，61618开始对外提供服务，获取共享文件夹所有权限，成为Master，61617重启变为Slave
        -2.代码测试：
            --git存放位置：H:\Git\DOCRecord\DOCRecord\ActiveMQDemoPOM
            --非本项目，在activemq基础项目中
                -生产者中修改url：
                     //单点故障url时，进行故障转移的url-- 17故障时，自动连接18，参数为随机从列表中选择一台，此处只配置生产者，master.slave
                     private static final String url2="failover:(tcp://127.0.0.1:61617,tcp://127.0.0.1:61618)?randomize=true";
                -消费者修改url：
                      private static final String url2="failover:(tcp://127.0.0.1:61616,tcp://127.0.0.1:61617,tcp://127.0.0.1:61618)?randomize=true";
            --测试开始：
                -使用生产者发送100条消息
                    依次打开管理平台：8161(A- 不做持久化)/8162(B-Slave)/8163(C-Master)
                -由上可知，消息在C-master中
                -关闭C-master,B-Slave获取到文件夹权限成为B-master继续使用（此时访问8162）
                -使用消费者消费以上100条信息
                    -A接收这100条信息进行消费，内部转发给B-Master，故B中也有消费记录
                    -进入8681/8682进行数据验证-
            --经测试检验：
                ABC中，B,C服务器不可以同时宕机，并且需要至少有一个服务器正常
———————————————————————————————————————————————————————————————
实例场景：
    www.imooc.com/video/15226
    https://github.com/jovezhao/nest










































