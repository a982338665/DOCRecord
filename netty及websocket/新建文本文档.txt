——————————————————————————
netty入门：
	1.高性能 事件驱动 异步非堵塞：
		io-java开源框架，jboss提供
		可快速开发http高性能的高可用的网络服务器
	2.基于nio的客户端，服务器端编程框架
	3.稳定性和伸缩性
——————————————————————————
netty使用场景：
	1.高性能领域：游戏，大数据，分布式等
	2.多线程并发领域
	3.异步通信领域
——————————————————————————
提纲：
	1.io通信：4种
	2.netty入门
	3.websocket入门
	4.netty实现websocket案例
——————————————————————————
前置知识：
	1.java基础
	2.io编程基础
	3.BIO同步阻塞，伪异步io，NIO同步非阻塞，AIO异步非阻塞
——————————————————————————
io通信：
	1.BIO:比例1:1创建线程，高并发的时候，性能急剧下降，发生堆栈溢出，创建线程失败等问题，导致进程宕机，无法提	      供对外服务
	  -1.一个线程负责连接
	  -2.一请求一应答(一个请求创建一个线程)
	  -3.缺乏弹性伸缩能力
	2.伪异步io：由线程池统一处理所以请求的接入
	  -1.线程池负责连接
 	  -2.M请求N应答(m个请求面向线程池(线程池数量可控)，会有定量的线程去处理M个请求)
	  -3.线程池阻塞(当访问请求个数大于线程池线程个数时，造成线程池阻塞)
	3.NIO通信：
	  -1.缓冲区buffer：一个对象（读写数据）
	  -2.通道channel:双向-网络数据通过此读取写入（流为单向）
	  -3.多路复用器Selector:轮询处理channel，通过selector-key获取，进行后续操作(不限定最大客户端连接)
	4.AIO通信：
	  -1.连接注册读写事件和回调函数
	  -2.读写方法异步
	  -3.主动通知程序：
		--1.通过concurrent的future获取结果
		--2.通过传入实现类来获取函数回调
4种io对比：
	客户端个数
  	io类型
	api使用难度
	调试难度
	可靠性
	吞吐量 
——————————————————————————
netty入门：
  1.原生NIO的缺陷：
	--1.类库和API繁杂
	--2.入门门槛高：熟悉多线程跟网络编程
	--3.工作量和难度大：客户端面临的断连重连，网络闪断，半包读写，失败缓存，网络拥塞，异常码流的处理问题
	    功能开发相对容易，但是可靠性能力补齐难度很大
	--4.jdk-nio存在的bug：selector空轮询会导致cup飚至100%(JDK1.7仍存在此问题，但发生概率降低，没从根本上解决)
netty优势：
  1.dubbo使用netty作为底层的通信框架
  -----
  1.api简单
  2.门槛低
  3.性能高
  4.成熟稳定
——————————————————————————
websocket：
  1.H5提出的协议规范
  2.握手机制（客户端-服务端）
    (出现之前一般是http的短连接/长连接）
  3.解决客户端和服务端实时通信而产生的技术
本质：基于TCP的协议，通过http/https发送一条特殊的http协议，握手后，创建一个用于交换数据的tcp连接，此后，客户端
      服务端用此来进行实时通讯（此时不再有握手参与）
优点：
  1.节省通信开销(以前都是用的轮询)
  2.服务器主动传送数据给客户端
  3.实时通信
建立连接：
  	--1.客户端发起握手请求
	--2.服务端响应请求
	--3.连接建立
生命周期：
 	--1.打开事件
	--2.消息事件
	--3.错误事件
	--4.关闭事件 
连接关闭：
	--1.服务器关闭底层TCP连接
	--2.异常时客户端发起TCP Close

——————————————————————————
netty实现webSocket通信案例：
1.netty开发服务端
2.html-客户端
3.实时交互
----------------------------------------------------
     <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
            <version>5.0.0.Alpha1</version>
        </dependency>






























——————————————————————————
