-------------------------------------------------
jvm内存区域：
	--线程共享：
		****java初始运行时分配好空间
		****线程共享的区域与JAVA程序运行的生命周期相同
		****系统垃圾回收的场所只发生在线程共享的区域
		****（实际上对大部分虚拟机来说只发生在Heap上）的原因
		--Heap                   --堆
		--Method Area		 --方法区
	--非线程共享：
		****线程开始，分配内存，线程结束，释放内存
		****此生命周期与所属线程相同
		--VM Strack		 --虚拟机栈(java栈)
		--Native method area	 --本地方法栈
		--Program counter register-程序计数器
java初始运行：
	1.首先,分配好 (方法区/堆)
	2.其次,jvm每遇到一线程，就为其分配VM,Native,Program
	3.最后,线程终止时，VM,Native,Program所占内存空间会被释放掉
-------------------------------------------------
--程序计数器：
	--1.较小的内存区域
	--2.当前线程执行的字节码的位置指示器。
	分支、循环、跳转、异常处理和线程恢复等基础功能都需要依赖这个计算器来完成
--虚拟机栈(栈内存)：
	--1.java指令=操作码(方法本身)+操作数(局部变量)
		--操作码(方法本身)：Strack
		--操作数(局部变量)：Strack 
			--基本数据类型：保存在栈
			--引用数据类型：引用地址保存在栈，对象保存在堆
	--2.栈内存随线程产生，随线程消失，线程结束，栈消失，所以不需要GC
	--3.方法执行：同时创建帧栈（帧栈作用如下:）
		****栈帧是一个内存区块，是一个数据集，
		****是一个有关方法(Method)和运行期数据的数据集，
		****当一个方法 A 被调用时就产生了一个栈帧 F1，并被压入到栈中，
		****A 方法又调用了 B 方法，于是产生栈帧 F2 也被压入栈，
		****执行完毕后，先弹出 F2栈帧，再弹出 F1 栈帧，
		****遵循“先进后出”原则
		--用来存储方法执行到结束的出入栈过程	
		--1.存储：局部变量表
			--存放编译期可知的各种数据类型(基本+引用)
			--所需的内存空间在编译期间完成分配，不在改变
		--2.存储：操作栈信息
--堆内存：
	--1.JVM的内存数据区
	--2.java堆处于物理不连续的内存空间
	--3.存放实例对象：同时在栈内存中保存一个4字节的内存地址指向
	--4.垃圾回收主要场所
--方法区：
	--1.存放常量、静态变量、JIT(即时编译器)编译后的代码
	--2.内存区域可不连续，可设大小，可拓展，与堆相同
	--3.这个区域内存(垃圾)回收的目的主要针对常量池的回收和类的卸载。
--运行时常量池：Runtime Constant Pool，简称 RCP
	--1.运行时产生的新常量也可以被放入常量池中，比如 String 类中的 intern() 		方法产生的常量。
--本地方法栈：
--直接内存区
　　直接内存区并不是 JVM 管理的内存区域的一部分，而是其之外的。该区域也会在 Java 	开发中使用到，并且存在导致内存溢出的隐患。如果你对 NIO 有所了解，可能会	知道 NIO 是可以使用 Native Methods 来使用直接内存区的。
------------------------------------------------------
JVM运行原理 例子:
**************************************
public class JVMShowcase {  
//静态类常量,  
public final static String ClASS_CONST = "I'm a Const";  
//私有实例变量  
private int instanceVar=15;  
public static void main(String[] args) {  
//调用静态方法  
runStaticMethod();  
//调用非静态方法  
JVMShowcase showcase=new JVMShowcase();  
showcase.runNonStaticMethod(100);  
}  
//常规静态方法  
public static String runStaticMethod(){  
return ClASS_CONST;  
}  
//非静态方法  
public int runNonStaticMethod(int parameter){  
int methodVar=this.instanceVar * parameter;  
return methodVar;  
}  
}
--1.向操作系统申请空闲内存,把内存段的起始地址和终止地址给 JVM
--2.JVM 准备加载类文件:先堆后栈分配内存
--3.检查分析class文件，有错即返回
--4.加载类：
	--1.JVM 默认使用 bootstrap 加载器，把 rt.jar下的所有类都加载到了堆类存的	    Method Area(方法区)，JVMShow 也被加载到内存中。
	--2.此时Method Area包含：
		--main+runStaticMethod（均为静态方法在类加载时产生）
		--堆,栈为null，没有对象新建和线程被执行
--5.执行main：
	--1.方法区加入ClASS_CONST常量：此为第一次被访问时产生于runStaticMethod方		法内部
	--2.堆内存中有两个对象 object和showcase对象（JVM先初始化父类）
	--3.栈内存有三个帧栈：
		同时，还创建了一个程序计数器指向下一条要执行的语句。
		--main()
		--runStaticMethod()
		--showcase.runNonStaticMethod()
--6.释放内存
**************************************























-------------------------------------------------------------------
常量池面试题：
此文章来自DreamSea（张小哲），转载请注明出处！
/**
 * 
 * @author DreamSea 2011-11-19
 */
public class IntegerTest {
    public static void main(String[] args) {    
        objPoolTest();
    }
    public static void objPoolTest() {
        Integer i1 = 40;
        Integer i2 = 40;
        Integer i3 = 0;
        Integer i4 = new Integer(40);
        Integer i5 = new Integer(40);
        Integer i6 = new Integer(0);       
        System.out.println((i1 == i2));		true
        System.out.println((i1 == i2 + i3));	true
        System.out.println((i4 == i5));		false
        System.out.println((i4 == i5 + i6));	true
	// Java的数学计算是在内存栈里操作的   
	//所以自动拆箱后,比的就是40=40+0，所以为true
    }
}
***********************************
解析过程：
　Integer i1=40；
  Java在编译的时候会执行将代码封装成Integer i1=Integer.valueOf(40);
  *******************************************
  *public static Integer valueOf(int i) {
  *  final int offset = 128;
  *  if (i >= -128 && i <= 127) { // must cache 
  *      return IntegerCache.cache[i + offset];
  *  }
  *      return new Integer(i);
  *  }
  *******************************************























































