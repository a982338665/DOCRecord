--------------------------------
11.spring boot热部署：
    --优点：节省时间，不用重启服务器，直接上线，如一些游戏的服务器，大企业服务器，适用于本地和线上
    --热部署和热加载的联系与区别：
          --联系：1.不用重启服务器  2.基于java类加载器实现
          --区别：
              --1.热部署：整个应用 --- 一般使用再生产环境上，相对安全
                   --侧重重新部署项目，不关闭服务器，直接替换项目
                   --直接重新加载整个应用：释放内存，浪费时间
              --2.热加载：部分类   --- 一般使用在开发环境上，较线上不安全，在开发调试中可以提高开发效率，即开发者模式
                   --修改java代码后，自动编译class文件，上传服务器，只加载修改后的类
                   --容器启动之后，启动一条后台线程，定时去检测类的时间戳变化，若有变化，则重新加载该类，改变程序运行行为
    --原理：
          --类加载的五个阶段：
            1.加载：找到类的静态存储结构并加载至jvm中，然后转化成方法区的运行时数据结构，生成class对象，加载阶段可以自定义类加载器参与。
            2.验证：确保字节码安全，不会对jvm安全造成威胁，可以通过其启动参数来禁用一些验证，但不建议，防止危害
            3.准备：确定内存布局，初始化类变量。不会执行程序自定义的赋值操作，例如 private static int count=12,这里赋值为12，
                    但实际上此时该count初始值是为0
            4.解析：将符号引用变为直接引用
            5.初始化：调用程序自定义代码 此时count=12；此行为不止一次，前四个运行后执行
                --java jvm中规定5种情况下，即刻初始化：
                    注意：final修饰的类在编译期的时候就会把结果放在常量池中，即使调用也不会在触发初始化
                    1.对类使用反射调用时（java.lang.reflect）,若类没有进行初始化，要先初始化类
                    2.初始化一个类的时候，若发现其父类未初始化，需要先初始化父类
                    3.虚拟机启动时，先初始化主类，例如：写了main方法的类，会被先初始化
                    4.invoke--动态代理支持解析结果符合条件会，先初始化其涉及到的类
          --类加载器的特点：
            1.由AppClass Loader(系统类加载器)开始加载指定类
            2.类加载器将加载任务交给其父类，父类找不到，自己再去加载
            3.Bootstrap Loader（启动类加载器）为顶级类加载器
          --java类的热部署：
            1.可通过类的热加载实现
            2.配置tomcat：三种方式
                --1.直接把web文件放在启动中的tomcat文件下的webapps中，此时就会自动发布此web项目
                --2.在tomcat/config/server.xml 中<host>内部添加context标签：
                    <Context debug=0 docBase="D:/imooc/web" path="/hot" privileged="true" reloadable="true"/>
                    //web为项目名称，hot为虚拟路径 ，访问路径：localhost:8080/hot/...
                --3.在%tomcat_home%/config/Catalina/localhost中添加一个xml（该xml名称随意）--reloadable
                    <Context path="" docBase="G:\idea_work_maven\TSB_ISCHOOL2_EXTERNAL_API\classes
                    \artifacts\TSB_ISCHOOL2_EXTERNAL_API_war_exploded" reloadable="true"/>
                    如果不写path属性，那么服务器会以该xml文件名字作为访问路径
-------------------------------------------------
类加载机制：
 --java运行过程：
    --1.确定JVM运行模式：client/server(根据java后的运行模式配置项 或 <JAVA_HOME>/jre/lib/i386/jvm.cfg)
    --2.开始启动JVM    : 加载<JAVA_HOME>/jre/bin/client或server/jvm.dll
        --加载启动类加载器：在启动JVM的同时将加载Bootstrap ClassLoader（启动类加载器，使用C/C++编写，属于JVM的一部分）
            --通过Bootstrap ClassLoader加载sun.misc.Launcher类（ExtClassLoader和AppClassLoader是它的内部类）
                -- sun.misc.Launcher类在执行初始化阶段时，会创建一个自己的实例，在创建过程中会创建一个ExtClassLoader
                  （扩展类加载器）实例、一个AppClassLoader（系统类加载器）实例，
                   并将AppClassLoader实例设置为主线程的ThreadContextClassLoader（线程上下文类加载器）。
                   然后AppClassLoader实例就开始加载Main.class及其所依赖的类库了。
 --类的加载流程：
      1. 加载（Loading）：仅有此处可被程序员控制
      2. 链接（Linking），细分为：验证（Verification）、准备（Preparation）和解析（Resolution）
      3. 初始化（Initialization）
      4. 使用（Using）
      5. 卸载（Unloading）
      注意：加载、链接、初始化三个阶段是交叉混合进行的，并不是加载完成后才执行链接，也不是链接完成后才执行初始化的。
      ----------
 --加载阶段：
    --类的二进制名称（Binary Name）获取定义此类的二进制字节流--边读取边验证（验证通过存储方法区，失败则抛出异常）
    --注意：
         1. 对于short boolean char int float long double基本数据类型是无需执行类加载的;-
-----------------------------------
项目测试时候——————配合ctrl+F9进行运行:
实现思路：
    -1.构建自定义加载核心类--即最终执行类  ClassLoaderCommon（继承ClassLoader）
    -2.定义工作接口：即需要被热加载的接口  LoaderManager
    -3.定义热加载的类，用以实现热加载接口  LoaderTest1
    --------------
    -4.定义工厂类：用来指定具体的实行逻辑  LoaderFactory
    --------------
    -5.定义后台线程类：监测指定类文件变化  ThreadListen
    -6.启动后台线程：测试热部署结果        test
    --------------
    -7.常量定义：包含项目class路径，及需要热部署的全类名