package pers.li;

/**
 * create by lishengbo on 2018-04-17 15:54
 * 二进制的位运算：
 * &   与
 * |   或
 * ^   异或
 * ~   反码
 * <<  左移         乘  3<<2=3*2*2=12
 * >>  右移         除  3>>1=3/2=1
 * >>> 无符号右移    除  3>>>1=3/2=1
 * ————————————————————————————————
 * 位运算较之其他算法更快，支持面广
 */
public class weiyunsuan {

    /**
     * 按位与 &
     * 两位全为1，结果才为1
     * 0&0=0 0&1=0 1&0=0 1&1=1
     * 例如：
     * 51&5即：
     * __11 0011 & ____ _101
     * 0011 0011 & 0000 0101
     * =0000 00001 =1
     * 故51 & 5 =1
     * ————————————————————
     * 特殊用法：
     * 1.清零：与一个各位都为0 的数值相与，结果为0
     * 2.取一个数中指定位：
     *   例如：设x=10101110,取x的低四位
     *   则 x & 0000 1111=0000 1110 此数值即为低四位
     *
     */

    //_______________________________________________

    /**
     * 按位或 |：只要有一个为1，结果便为1
     * ————————————————————
     * 特殊用法：常用于对一个数据的某些位，置为1
     * 例如： x= 1010 0000,将低四位置为1
     * x | 0000 1111=1010 1111
     */

    //_______________________________________________
    /**
     * 异或 ^
     * 值不同为1，值相同为0
     * 0^0=0 1^1=0 1^0=1 0^1=1
     *  ————————————————————
     * 特殊用法：是特定为翻转
     * 例如：x=10101110 使低四位翻转
     * x^0000 1111= 1010 0001
     * 与0相异或，保留原值：
     * x^0000 0000 = 1010 1110
     * —————————————————————
     * 两个A,B变量交换值的方法：
     * 1.C=A A=B B=C        中间值
     * 2.A=A+B B=A-B A=A-B  加减法
     * 3.位异或实现：效率最高：
     *      原理：利用一个数异或本身等于0和异或运算符合交换律
     *      A=A^B B=A^B A=A^B
     *
     *
     *
     */
    //_______________________________________________

    /**
     *反码：~
     * ~1=0 ~0=1
     * 　在计算机中，负数以其正值的补码形式表达，方法为其绝对值求反加一。
     　　例如 -100的绝对值为100
     　　100原码：1000 0000 0110 0100
     　　100反码：1111 1111 1001 1011
     　　100补码：1111 1111 1001 1100=1111 1111 1001 1011（反码） +1
        满二进一
     　　所以-100二进制表示为：1111 1111 1001 1100
     　　原码：一个整数按绝对值大小转换成的二进制数称为原码；
     　　反码：将二进制数按位取反，所得的新二进制数称为原二进制数的反码；（取反操作：1变0,0变1）
     　　补码：反码加1称为补码。
     */
    //_______________________________________________
    /**
     * 左移运算：<<
     * 将二进制各位左移若干位，左边二进制位丢弃，右边补0
     * 2<<1=4
     * ___________
     * 左移舍弃的高位不包含1，则每次左移一位，相当于该数乘以2
     * -14<<2  =11001000
     * 原码：          0000 1110
     * 补码：          1111 0001
     * -14的二进制：    1111 0010
     * 左移两位：丢弃补0 =11001000
     * ——————————————————————|
     * java中int占4个字节，一个字节是8位
     * 所以对于
     * int 11  占32位
     * 二进制位：00000000 00000000 00000000 1011
     * 所以11<<2=11*2*2=44
     *
     */
//    int a = 2;//0000 0000 0000 0000 0000 0000 0000 0010
//    printf("%d\n",a>>2);//0000 0000 0000 0000 0000 0000 0000 0000   0
//    printf("%d\n",a<<2);//0000 0000 0000 0000 0000 0000 0000 1000   8
//    printf("%d\n",a>>33);//0000 0000 0000 0000 0000 0000 0000 0001  1
//    printf("%d\n",a<<33);//0000 0000 0000 0000 0000 0000 0000 0100  4
//    printf("%d\n",a>>-30);//0000 0000 0000 0000 0000 0000 0000 0000 0
//    printf("%d\n",a<<-39);//0000 0100 0000 0000 0000 0000 0000 0000 67108864
    //_______________________________________________
//    int b = -2;//1000 0000 0000 0000 0000 0000 0000 0010
//    //1111 1111 1111 1111 1111 1111 1111 1101//取反
//    //1111 1111 1111 1111 1111 1111 1111 1110//加一
//    printf("%d\n",b>>2);//1000 0000 0000 0000 0000 0000 0000 0010
//    //1111 1111 1111 1111 1111 1111 1111 1101
//    //1111 1111 1111 1111 1111 1111 1111 1110
//    //1111 1111 1111 1111 1111 1111 1111 1111//移位右端移出左端用1补，符号位不变
//    //1000 0000 0000 0000 0000 0000 0000 0000//取反
//    //1000 0000 0000 0000 0000 0000 0000 0001//加1 -1
//    printf("%d\n",b<<2);//1111 1111 1111 1111 1111 1111 1111 1110
//    //1111 1111 1111 1111 1111 1111 1111 1000//移位左端移出右端用0补，符号位不变
//    //1000 0000 0000 0000 0000 0000 0000 0111//取反
//    //1000 0000 0000 0000 0000 0000 0000 1000//加1 -8
//    printf("%d\n",b>>33);//1111 1111 1111 1111 1111 1111 1111 1111//相当于所有位都补1，符号位不变
//    //1000 0000 0000 0000 0000 0000 0000 0000//取反
//    //1000 0000 0000 0000 0000 0000 0000 0001//加1 -1
//    printf("%d\n",b<<33); // -4
//    printf("%d\n",b>>-30);// -1
//    printf("%d\n",b<<-39);// -67108864
    //_______________________________________________
    /**
     * 右移运算：>>
     * 负数先将其二进制按位取反加一，然后进行移位，符号位不变(负数高位为1)
     * 将一个数的所有二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃
     * 操作数没右移一位，相当于该数除以2
     *
     * -14>>2 ==-4
     * 14原码： 0000 0000 0000 1110
     * -14原码：1000 0000 0000 1110
     * 反码：   1111 1111 1111 0001
     * 反码+1： 1111 1111 1111 0010
     * 右移位2: 1111 1111 1111 1100 (负数左补1)
     * 取反：   1000 0000 0000 0011
     * 取反+1： 1000 0000 0000 0100
     * -2*2=-4
     *
     */
    //_______________________________________________
    /**
     * 无符号右移运算：>>
     * 将一个数的所有二进制位全部右移若干位，左边空出的位用0填充，右边丢弃
     * 如：
     * -14>>>2
     * (11111111 11111111 11111111 11110010)>>>2
     * (00111111 11111111 11111111 11111100)=1073741820
     *
     *
     *
     */

    //_______________________________________________
    //java中的二进制
//    客户端（java）--->serializable--->服务器（java）
//      提高服务器性能的方案：
//      服务器使用c语言，采用0,1二进制进行数据传输
/**
 * int类型数据：
 *  ·byte   8bit -128~127
 *  ·short  16
 *  ·int    32
 *  ·long   64
 * float类型：
 *  ·单精度 float 32
 *  ·双精度 double64
 * boolean型：true，false
 * char：unicode 16bit 2个字节（1个字节=8bit）
 * ————————————————————————————————————————
 * 对应的类类型（包装类）
 *  Integer,Float,Boolean,Character,Double,Short,Byte,Long
 * ————————————————————————————————————————
 * 例如：
 * Employee：
 *  int id 8143
 *  String name :张三
 *  String describe : 厉害
 * ----
 * int类型转换为字节：
 * 8143（00000000 00000000 00011111 11001111）
 * 转换为字节：
 * >byte[] b=[-49,31,0,0]
 * ----
 * 8143>>0*8 & oxff=(11001111)=207（无符号207，有符号-49）
 * 8143>>1*8 & oxff=(00011111)=31
 * 8143>>2*8 & oxff=(00000000)=0
 * 8143>>3*8 & oxff=(00000000)=0
 *
 *
 *
 *
 *
 *
 *
 */













    /**
     *
     * @param args
     */












    public static void main(String[] args) {

        //异或交换值--------------------------
        int A=15;
        int B=18;
        System.out.println("A:15--"+ erjinzhi.to2(15));
        System.out.println("B:18--"+ erjinzhi.to2(18));
        A=A^B;
        System.out.println("A1:"+A);
        System.out.println("B1:"+B);
        B=A^B;
        System.out.println("A2:"+A);
        System.out.println("B2:"+B);
        A=A^B;
        System.out.println("A:"+A);
        System.out.println("B:"+B);
        //-----------------------------------
        //java内置的进制转换
        //十进制转16进制
        String s = Integer.toHexString(8);
        //十进制转八进制
        String s1 = Integer.toOctalString(8);
        //十进制转二进制
        String s2 = Integer.toBinaryString(8);
        //十六进制转10进制
        String s3 = Integer.valueOf("FFFF", 16).toString();
        //八进制转10进制
        String s4 = Integer.valueOf("376", 8).toString();
        //二进制转10进制
        String s5 = Integer.valueOf("0101", 2).toString();
        System.out.println(s+"|"+s1+"|"+s2+"|"+s3+"|"+s4+"|"+s5);



    }



}
