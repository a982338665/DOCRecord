----------------------------------------------
--java包命名规则：
	--1.包名必须为小写
	--2.
	经过我对“个人的”单词搜索，有“individual、personal、private、one-man”，进一步对以上4个单词词意的分析，并在保证了唯一性，使用每个单词的前4个字母作为前缀，正好和“com”也做了区分。如下：
   	 --indi ：
         个体项目，指个人发起，但非自己独自完成的项目，可公开或私有项目，copyright主要属于发起者。
         包名为“indi.发起者名.项目名.模块名.……”。
  	  --pers ：
         个人项目，指个人发起，独自完成，可分享的项目，copyright主要属于个人。
         包名为“pers.个人名.项目名.模块名.……”。
  	  --priv ：
         私有项目，指个人发起，独自完成，非公开的私人使用的项目，copyright属于个人。
         包名为“priv.个人名.项目名.模块名.……”。
   	 --onem ：
         与“indi”相同，推荐使用“indi”。
 
    另外，我为了区分团队项目和前面所说项目的区分，还有了一下扩展：
   	 --team ：
         团队项目，指由团队发起，并由该团队开发的项目，copyright属于该团队所有。
         包名为“team.团队名.项目名.模块名.……”。
    	 --com ：
 公司项目，copyright由项目发起的公司所有。
         包名为“com.公司名.项目名.模块名.……”。
----------------------------------------------
--数据库事务的四大特性以及事务的隔离级别
  --事务的四大特性（ACID）：
	--⑴原子性（Atomicity）：事务包含的所有操作要么全部成功，要么全部失败回滚。
	--⑵一致性（Consistency）：一个事务执行之前和执行之后都必须处于一致性状态：拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。
	--⑶隔离性（Isolation）：隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。
	--⑷持久性（Durability：持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。
　　	--例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。
	--以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性。
--------------------
   --事务的隔离级别：
   --如果不考虑事务的隔离性，会发生的几种问题：
	--1.脏读：
		脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户A向用户B转账100元，对应SQL命令如下：
    update account set money=money+100 where name=’B’; (此时A通知B)
    update account set money=money - 100 where name=’A’;
　　当只执行第一条SQL时，A通知B查看账户，B发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当B以后再次查看账户时就会发现钱其实并没有转。
	--2.不可重复读:
　		不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。
　　		不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。
	--3.虚读(幻读)：
　		幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。
　　幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。
	--MySQL数据库为我们提供的四种隔离级别：	
　　① Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。
　　② Repeatable read (可重复读)：可避免脏读、不可重复读的发生。
　　③ Read committed (读已提交)：可避免脏读的发生。
　　④ Read uncommitted (读未提交)：最低级别，任何情况都无法保证。
	--以上四种隔离级别最高的是Serializable级别，最低的是Read uncommitted级别，当然级别越高，执行效率就越低。像Serializable这样的级别，就是以锁表的方式(类似于Java多线程中的锁)使得其他的线程只能在锁外等待，所以平时选用何种隔离级别应该根据实际情况。在MySQL数据库中默认的隔离级别为Repeatable read (可重复读)。
　　在MySQL数据库中，支持上面四种隔离级别，默认的为Repeatable read (可重复读)。
	--Oracle数据库中：
	支持Serializable (串行化)级别和Read committed (读已提交)这两种级别，其中默认的为Read committed级别。
-----------------
在MySQL数据库中查看当前事务的隔离级别：
  	--select @@tx_isolation;
　　在MySQL数据库中设置事务的隔离级别：
   	--set  transaction isolation level '隔离级别名称';
    	或
   	--set tx_isolation=’隔离级别名称;’
    --设置数据库的隔离级别一定要是在开启事务之前！
    --如果是使用JDBC对数据库的事务设置隔离级别的话，也应该是在调用Connection对象的setAutoCommit(false)方法之前。调用Connection对象的setTransactionIsolation(level)即可设置当前链接的隔离级别，至于参数level，可以使用Connection对象的字段：
	--1.Connection.TRANSACTION_NONE;
	--2.Connection.TRANSACTION_READ_COMMITTED;
	--3.Connection.TRANSACTION_READ_UNCOMMITTED;
	--4.Connection.TRANSACTION_REPEATABLE_READ;
	--5.Connection.TRANSACTION_SERIALIZABLE;
    --在JDBC中设置隔离级别的部分代码：
	Connection conn=null;
	Statement st=null;
	ResultSet rs=null;
 	try{
		conn=JDBCUtils.getConnection();
		//设置事务隔离级别
		conn.setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE);
		conn.setAutoCommit(false)//开启事务
----------------------------------------------	
JAVA中拦截器与过滤器的差异:
	--1.拦截器是基于java反射机制的，而过滤器是基于函数回调的。
	--2.过滤器依赖于servlet容器，而拦截器不依赖于servlet容器。
	--3.拦截器只对action起作用，而过滤器几乎可以对所有请求起作用。
	--4.拦截器可以访问action上下文、值栈里的对象，而过滤器不能。
	--5.在action的生命周期里，拦截器可以多起调用，而过滤器只能在容器初始化时调用一次。
----------------------------------------------	
1.过滤器
	Servlet中的过滤器Filter是实现了javax.servlet.Filter接口的服务器端程序，主要的用途是过滤字符编码、做一些业务逻辑	判断等。其工作原理是，只要你在web.xml文件配置好要拦截的客户端请求，它都会帮你拦截到请求，此时你就可以对请求或响	应(Request、Response)统一设置编码，简化操作；同时还可进行逻辑判断，如用户是否已经登陆、有没有权限访问该页面等等	工作。它是随你的web应用启动而启动的，只初始化一次，以后就可以拦截相关请求，只有当你的web应用停止或重新部署的时候	才销毁，
2.监听器
	现在来说说Servlet的监听器Listener，它是实现了javax.servlet.ServletContextListener 接口的服务器端程序，它也是随	web应用的启动而启动，只初始化一次，随web应用的停止而销毁。主要作用是： 做一些初始化的内容添加工作、设置一些基本	的内容、比如一些参数或者是一些固定的对象等等。
3.拦截器
	拦截器是在面向切面编程中应用的，就是在你的service或者一个方法前调用一个方法，或者在方法后调用一个方法。是基于	JAVA的反射机制。拦截器不是在web.xml，比如struts在struts.xml中配置，	
----------------------------------------------	
servlet简介：
	--1.作用：处理请求和发送响应
	--2.Servlet是为了解决实现动态页面而衍生的东西（http协议--B/S模式(浏览器/服务器)）
tomcat和servlet的关系：
	--1.Tomcat是Web应用服务器,是一个Servlet/JSP容器. 
	--2.Tomcat作为Servlet容器,负责处理客户请求,把请求传送给Servlet,并将Servlet的响应传送回给客户.
	-------------------------
	--3.从http协议中的请求和响应可以得知：
		--1.浏览器发出的请求是一个请求文本
		--2.而浏览器接收到的也应该是一个响应文本
	-------------------------
	--4.①Tomcat将http请求文本接收并解析，然后封装成HttpServletRequest类型的request对象
		所有的HTTP头数据都可以通过request对象调用对应的方法查询到。
	--5.②Tomcat同时会要响应的信息封装为HttpServletResponse类型的response对象，
		通过设置response属性就可以控制要输出到浏览器的内容，然后将response交给tomcat，
		tomcat就会将其变成响应文本的格式发送给浏览器
servlet编写：
	--1.servlet创建：创建一个MyServlet继承HttpServlet，重写doGet和doPost方法
		public class servletTest extends HttpServlet {
			private static final long serialVersionUID = 1L;	
			@Override
			public void doGet(HttpServletRequest request, HttpServletResponse response) 		throws ServletException, IOException {
			// TODO Auto-generated method stub
			}
   			@Override
			public void doPost(HttpServletRequest request, HttpServletResponse response) 
		throws ServletException, IOException {
			// TODO Auto-generated method stub
			}
}
	--2.在web.xml中配置MyServlet，让tomcat将封装好的request找到对应的servlet让其使用:
		  <servlet>
			 <!-- 给servlet命名（与以下mapping相同） -->
   			   <servlet-name>MyServlet</servlet-name>
			 <!-- servlet全限定类名，即servlet位置  -->
  			   <servlet-class>test.MyServlet</servlet-class>
    			 <init-param>
    			      <param-name>contextConfigLocation</param-name>
     			      <param-value>/WEB-INF/ApplicationContext.xml</param-value>
   			   </init-param>
			 <!-- load-on-startup元素标记容器是否在启动的时候就加载这个servlet -->
			 <!-- 1--为优先级最高，0为调用该servlet时才实例化（默认为0）-->
    			   <load-on-startup>1</load-on-startup>
  		    </servlet>
  		    <servlet-mapping>
			 <!-- 同上名称 -->
   			   <servlet-name>MyServlet</servlet-name>
			 <!-- 访问servlet的路径 -->
   			   <url-pattern>/MyServlet</url-pattern>
  		    </servlet-mapping>
详解创建servlet的原理:
	--1.servlet的生命周期：
		--1.初始化(init(ServletConfig conf))：
			--load-on-startup配置为1：容器启动时，加载servlet、
			--load-on-startup配置为0（默认为0）:第一次请求servlet时，加载servlet
		--2.请求响应(service(ServletRequest req，ServletResponse res)):
			--判断客户端请求方式（post/get）
		--3.销毁(destroy())：
			--服务器关闭时，销毁这个servlet对象
	---------------------
	--2.为什么创建的servlet是继承自httpServlet，而不是直接实现Servlet接口？
-----------------------------------------------------------------
--1.什么是虚拟机？为什么Java被称作是“平台无关的编程语言”？
	--1.Java虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译器编译成能被Java虚拟机执行的字节码文件。
	--2.虚拟机作为转换器能够在不同的平台将字节码文件解释称对应平台的机器码文件，所以他与平台无关。
-----------------------------------------------------------------
--2.JDK 和 JRE 的区别是什么？
	--1.JDK:Java Developer's kit  Java开发工具包，
　　　　--2、JRE：Java Run Environment Java运行环境， 
　　　　--3、JRE中包括：java运行所依赖的类库(比如String类、等等好多类，都是属于JRE中的)，JVM(虚拟机)等一些东西
	--4、JDK包括：JRE 和 编译器、其他一些工具(调试器)等。目的是让开发者开发、编译、执行java应用程序。
-----------------------------------------------------------------
--3.什么是static关键字？Java中是否可以覆盖(override)一个private或者是static的方法？
　	--1、static修饰成员变量和方法
　　　　--2、修饰成员变量：整个类的实例共享该属性，可通过类直接调用该属性
	--3、修改方法：类可以直接调用该方法，静态方法只能调用static修饰过的变量和类中的方法。而非静态方法没有限制，
	--4、注意：static修饰过的成员变量或方法，跟着类的加载就加载到了内存，所以类可以直接调用这些修饰过的属性和方法，而静态方法只能调用static修饰过的属性和方法也是因为这个原因，静态属性和方法先于非静态属性和方法加载，所以静态方法调用属性时，非静态还没加载完呢， 而当非静态调用静态时，就没有这个顾虑。
	--5、覆盖，也就是重写， 前提条件是需要继承，父类中用private修饰的方法，对子类都不可见，继承不了，所以没有所谓的重写
	--6、不能重写static的方法，原因是 static在编译时期静态绑定的， 而方法的重写是基于运行时动态绑定的，而且static方法跟类的实例没有任何的关系。
　　　  --7、又抛出了运行时绑定的一些相关问题。只能查询咯。（*）
	运行时绑定又称动态绑定：前提是有继承、重写、父类对象指向子类实例， 这样就产生了多态，在运行时才能知道父类对象指向了哪个子类实例。例如：B b = A a()；在运行时才能知道b中存放着A实例a的地址。
	编译时绑定成静态绑定：就是在编译期间就已经加载到了内存，包括private、static、final修饰的变量和方法，还有构造函数，都市静态绑定
-----------------------------------------------------------------
--4.是否可以在static环境中访问非static变量？
	--static是跟着类一起加载呢，那时候非static变量还没加载进内存，那么static就访问不了非static变量。
-----------------------------------------------------------------
--5.Java支持的数据类型有哪些？什么是自动拆装箱？
	--1.基本数据类型：
　　　　　　　　整数值型：byte,short,int,long,
　　　　　　　　字符型：char
　　　　　　　　浮点类型：float,double
　　　　　　　　布尔型：boolean
　　　　　　　　整数默认int型，小数默认是double型。Float和long类型的必须加后缀。
　　　　--2.引用数据类型：
　　　　　　　  引用数据类型：实质就是存放的地址在堆中，而在栈中有指向堆中地址的一个变量名，这样的就是引用数据类型，String、数组、集合等都是。
	--3.为什么需要包装类？
		例如，int想要转换为String 直接强制转换会出现问题，所以需要先将int转换为Integer，然后再toString
	--4.什么时候会自动装箱？
		例如1：装箱比如int变Integer，如果某个地方的参数需要填入Integer，你传int给它，它自动会生成一个Integer传过去。反之，Integer变int，就是自动拆箱；例如2：Integer i = 100;   这个时候也完成了自动装箱，100只是一个int类型的，底层将int自动转换为了包装类Integer。
	--5.自动装箱和拆箱就是基本类型和引用类型之间的转换，至于为什么要转换，因为基本类型转换为引用类型后，就可以new对象，从而调用包装类中封装好的方法进行基本类型之间的转换或者toString
-----------------------------------------------------------------
--6.Java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思？
	--重载：方法名相同、参数不相同。 修饰符、返回值无所谓。　
　　　　--重写：方法名、参数、返回值都必须相同、修饰符 >= 父类方法修饰符
	注意：重写是为了进行多态的使用，多态的好处就是能让代码的维护性能更高。而重载是为了一个方法能根据参数的不同，选择更多的功能。
-----------------------------------------------------------------
--7.什么是构造函数？什么是构造函数重载？什么是复制构造函数？
	--1.构造函数在新对象被创建的时候会调用。每一个类都有构造函数，构造函数的名字跟类名相同，没有返回值，每个类有一个默认的无参构造函数
	--2.Java中构造函数重载和方法重载很相似。可以为一个类创建多个构造函数。每一个构造函数必须有它自己唯一的参数列表。
-----------------------------------------------------------------
--8.Java支持多继承么？
	--1.Java中类不支持多继承，只支持单继承（即一个类只有一个父类）
	--2.java中的接口支持多继承，，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）。
-----------------------------------------------------------------
--9.接口和抽象类的区别是什么
	--接口是最顶级的抽象，抽象类次之。
　　　　--接口中所有的变量都是public static final  而抽象类中能包含任意类型的变量  接口中所有的方法都是abstract。
	--接口是最顶级的抽象，所以它只声明方法，而没有方法体，而抽象类既可以有方法体的方法，也可以没有
　　　　--一个类中有抽象方法，则该类一定要是抽象类。而且继承该类的类必须重写抽象方法，
　　　　--abstract只能修饰类和方法，不能修饰属性。
　　　　--一个方法被abstract修饰了，则该方法只能声明，没有方法体（类似于接口中的方法，默认省略public abstract )
-----------------------------------------------------------------
--10.什么是值传递和引用传递:
	--值传递是针对基本引用类型，如果将值赋予另一个a变量，改变a变量的值，原先变量的值并不会因此改变
　　　　--引用传递针对的是引用数据类型，如果将a变量的值赋给b变量，改变b变量的的值，a变量的值也会因此改变，因为传递的是一个地址，一个地址中的值改变了，所有指向该地址的对象的值也会相应的改变：传递地址值，指向变了值就变了
-----------------------------------------------------------------
--11.进程和线程的区别是什么？
	--进程是执行着的应用程序，而线程是进程内部的一个执行序列。
	--一个进程可以有多个线程。线程又叫做轻量级进程。
-----------------------------------------------------------------
--12.创建线程有几种不同的方式？你喜欢哪一种？为什么？
	--继承Thread类
	--实现Runnable接口
	--使用Executor框架来创建线程池
	--后两者更高效
	--注意：继承Thread类局限于单继承，所以实现Runnable接口，就能在继承别的类。其实本质都一样，Thread类也实现了Runnable接口。
-----------------------------------------------------------------
--13.概括的解释下线程的几种可用状态
	--1.新建( new )：新创建了一个线程对象。
　　　　--2. 可运行( runnable )：线程对象创建后，其他线程(比如 main 线程）调用了该对象 的 start ()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获 取 cpu 的使用权 。
	--3.运行( running )：可运行状态( runnable )的线程获得了 cpu 时间片（ timeslice ） ，执行程序代码。
　　　　--4.阻塞( block )：阻塞状态是指线程因为某种原因放弃了 cpu 使用权，也即让出了 cpu timeslice ，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得 cpu timeslice 转到运行( running )状态。阻塞的情况分三种：
　　　　　　　(一). 等待阻塞：运行( running )的线程执行 o . wait ()方法， JVM 会把该线程放 入等待队列( waitting queue )中。
　　　　　　　(二). 同步阻塞：运行( running )的线程在获取对象的同步锁时，若该同步锁 被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中。
　　　　　　　(三). 其他阻塞: 运行( running )的线程执行 Thread . sleep ( long ms )或 t . join ()方法，或者发出了 I / O 请求时,JVM 会把该线程置为阻塞状态。当sleep()状态超时、 join ()等待线程终止或者超时、或者 I / O 处理完毕时，线程重新转入可运行( runnable )状态。
　　　　--5.死亡( dead )：线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生。
-----------------------------------------------------------------
--14.









-----------------------------------------------------------------
 
----------------------------------------------	


  

