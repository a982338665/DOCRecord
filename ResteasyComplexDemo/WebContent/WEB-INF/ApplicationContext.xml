<?xml version="1.0" encoding="UTF-8"?>
<beans default-autowire="byType" xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:jee="http://www.springframework.org/schema/jee"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:task="http://www.springframework.org/schema/task"
		xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:p="http://www.springframework.org/schema/p"
		xmlns:context="http://www.springframework.org/schema/context" 
		xmlns:mvc="http://www.springframework.org/schema/mvc" 
		xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/jee
			http://www.springframework.org/schema/jee/spring-jee.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-3.0.xsd 
			http://www.springframework.org/schema/mvc 
			http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
			http://www.springframework.org/schema/task    
            http://www.springframework.org/schema/task/spring-task-3.0.xsd    
			http://www.springframework.org/schema/tx
			http://www.springframework.org/schema/tx/spring-tx.xsd
			http://www.springframework.org/schema/aop
			http://www.springframework.org/schema/aop/spring-aop.xsd">
	<!-- restEasyxml文件加载 -->
	<import resource="classpath:springmvc-resteasy.xml"/>
	<!-- 注解扫描包 -->
	<!-- 根上下文只扫描 dao, service.impl 以及 webservice 包下的class  
    <context:component-scan base-package="org.xxx.**.dao, org.xxx.**.service.impl, org.xx.**.webservice" />  
    mvc上下文只扫描 controller 包下的class  
    <context:component-scan base-package="org.xxx.**.controller" />   -->
	<context:component-scan base-package="pers.lishbo.*" />
	<!-- <context:component-scan base-package="pers.lishbo.awebservice.webservice"
        use-default-filters="false">
        <context:include-filter type="annotation"
            expression="org.springframework.stereotype.Controller" />
	</context:component-scan> -->
	<!--  开启这个配置，spring才能识别@Scheduled注解   -->  
	<tx:annotation-driven />
	<!-- 开启注解 -->
    <mvc:annotation-driven />
	<!-- 配置mybitas mapper自动扫描 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
        <property name="basePackage" value="pers.lishbo.adao.**" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
    <!-- ========================================================================================================================== -->
   <!--     1. 数据源 : DriverManagerDataSource
    <bean id="dataSource"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/ssm_test" />
        <property name="username" value="root" />
        <property name="password" value="root" />
    </bean>
    2. mybatis的SqlSession的工厂: SqlSessionFactoryBean dataSource:引用数据源
	MyBatis定义数据源,同意加载配置
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="mapperLocations" value="classpath:pers/lishbo/amapper/*Mapper.xml" />
        <property name="configLocation" value="classpath:mybatis-config.xml" /> 
    </bean>
     4. 事务管理 : DataSourceTransactionManager dataSource:引用上面定义的数据源
    <bean id="txManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    5. 使用声明式事务transaction-manager：引用上面定义的事务管理器
    <tx:annotation-driven transaction-manager="txManager" /> -->
   <!-- ========================================================================================================================== -->
    <!-- 将数据连接信息配置在tomcat中:多数据源配置 -->
    <!-- 运营支撑DataSource -->
	<bean id="dataSource_support" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
		    <value>java:comp/env/jdbc/mysql_u_tsb_ww</value>
		</property>
		 <property name="resourceRef"><value>true</value></property>
	</bean>  
	<!-- 学酷DataSource -->
	<bean id="dataSource_xueku" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
		    <value>java:comp/env/jdbc/mysql_u_tsb_s</value>
		</property>
		 <property name="resourceRef"><value>true</value></property>
	</bean>  
     <!-- 动态数据源配置================ -->
    <bean id="dataSource" class="pers.lishbo.datasource.DynamicDataSource"> 
		<property name="targetDataSources"> 
			<!-- key与value-ref的值必须一样 -->
    		<map key-type="java.lang.String"> 
	        	<entry key="dataSource_support" value-ref="dataSource_support" /> 
    	    	<entry key="dataSource_xueku" value-ref="dataSource_xueku" /> 
	    	</map> 
		</property> 
		<property name="defaultTargetDataSource" ref="dataSource_support" /> 
	</bean> 
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	  <!-- <property name="dataSource" ref="dataSource" /> -->
	  <property name="dataSource" ref="dataSource" />
	  <property name="configLocation" value="classpath:mybatis-config.xml"></property>
	  <property name="mapperLocations" value="classpath:pers/lishbo/amapper/*Mapper.xml" />
	  <!-- 分页查询 -->
	  <property name="plugins">
	  	<list>
	  		<bean class="com.tsb.ischool.framework.interceptor.DiclectStatementHandlerInterceptor"></bean>
	  	</list>
	  </property> 
	</bean>
		<!-- aop配置    -->
	
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="txManager"/>
	
	<!-- a PlatformTransactionManager is still required -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- (this dependency is defined somewhere else) -->
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<tx:advice id="defaultTxAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />  
	        <tx:method name="add*" propagation="REQUIRED" />  
	        <tx:method name="create*" propagation="REQUIRED" />  
	        <tx:method name="insert*" propagation="REQUIRED" />  
	        <tx:method name="update*" propagation="REQUIRED" />  
	        <tx:method name="modify*" propagation="REQUIRED" />  
	        <tx:method name="del*" propagation="REQUIRED" />  
	        <tx:method name="remove*" propagation="REQUIRED" />  
	          
	        <tx:method name="query*" read-only="true"/>  
	        <tx:method name="use*" read-only="true"/>  
	        <tx:method name="get*" read-only="true" />  
	        <tx:method name="count*" read-only="true" />  
	        <tx:method name="find*" read-only="true" />  
	        <tx:method name="list*" read-only="true" />  
	        <tx:method name="load*" read-only="true"/>
	        <tx:method name="is*" read-only="true"/>
			<tx:method name="has*" read-only="true"/>
			
	        <tx:method name="*" propagation="REQUIRED"/>  
		</tx:attributes>
	</tx:advice>
	
	<!-- <bean id="readWriteDataSourceTransactionProcessor" class="com.tsb.ischool.framework.common.ReadWriteDataSourceProcessor">  
	   <property name="forceChoiceReadWhenWrite" value="false"/>  
	</bean>   -->
	
	<aop:config expose-proxy="true">  
        <!-- 只对业务逻辑层实施事务 -->  
        <aop:pointcut id="txPointcut" expression="execution(* pers.lishbo..*Service.*(..))" />  
        <aop:advisor advice-ref="defaultTxAdvice" pointcut-ref="txPointcut"/>  
        <!-- 通过AOP切面实现读/写库选择 -->  
        <!-- <aop:aspect order="-2147483648" ref="readWriteDataSourceTransactionProcessor">  
           <aop:around pointcut-ref="txPointcut" method="determineReadOrWriteDB"/>  
        </aop:aspect>  --> 
    </aop:config>   
	

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
  		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
<!-- 	<bean id="sqlSessionService" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
    <constructor-arg index="0" ref="sqlSessionFactoryService" />
</bean> -->
	 <mvc:interceptors>  
        <mvc:interceptor>  
            <mvc:mapping path="/" />  
            <bean class="com.tsb.ischool.framework.interceptor.AccessStatisticsIntceptor" />  
        </mvc:interceptor>  
    </mvc:interceptors> 
    <!--redis配置 ================================================================================== -->
	<!-- <context:property-placeholder location="file:#{systemProperties['webapp.sample']}/WEB-INF/conf/redis.properties" /> -->
    <!-- <bean id="redisUtil" class="pers.lishbo.common.RedisUtil">
        <property name="addr"><value>${redis.addr}</value></property>
        <property name="port"><value>${redis.port}</value></property>
        <property name="auth"><value>${redis.auth}</value></property>
        <property name="maxIdle"><value>${redis.maxIdle}</value></property>
        <property name="maxActive"><value>${redis.maxActive}</value></property>
        <property name="maxWait"><value>${redis.maxWait}</value></property>
        <property name="timeOut"><value>${redis.timeOut}</value></property>
        <property name="testOnBorrow"><value>${redis.testOnBorrow}</value></property>
    </bean> -->  
	<!-- start redis配置================== -->
	<!--context:property-placeholder 标签用来导入properties文件。从而替换${redis.maxIdle}这样的变量。-->
<!-- 	<context:property-placeholder location="classpath:redis.properties" />
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">  
        <property name="maxIdle" value="${redis.maxIdle}" />  
        <property name="maxActive" value="${redis.maxActive}" />  
        <property name="maxWait" value="${redis.maxWait}" />  
        <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
    </bean>
    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"  
        p:host-name="${redis.host}" p:port="${redis.port}" p:password="${redis.pass}"  p:pool-config-ref="poolConfig" />  
    RedisTemplate就是spring对redis的一个封装而已
    spring对dao层的封装很多用了类似于下面代码的模板方式
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">  
        <property name="connectionFactory"   ref="connectionFactory" />  
    </bean> -->
    <!-- end redis配置 =================== -->
    <!-- 引入properties配置文件 -->    
<!--  <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
    <property name="locations">  
        <list>  
           <value>classpath:*.properties</value>  
            要是有多个配置文件，只需在这里继续添加即可  
        </list>  
    </property>  
</bean>  
	 jedis 配置  
   <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig" >  
         <property name="maxIdle" value="${redis.maxIdle}" />  
         <property name="maxWaitMillis" value="${redis.maxWait}" />  
         <property name="testOnBorrow" value="${redis.testOnBorrow}" />  
   </bean >  
  redis服务器中心  
   <bean id="connectionFactory"  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory" >  
         <property name="poolConfig" ref="poolConfig" />  
         <property name="port" value="${redis.port}" />  
         <property name="hostName" value="${redis.host}" />  
         <property name="password" value="${redis.password}" />  
         <property name="timeout" value="${redis.timeout}" ></property>  
   </bean >  
   <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" >  
         <property name="connectionFactory" ref="connectionFactory" />  
         <property name="keySerializer" >  
             <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />  
         </property>  
         <property name="valueSerializer" >  
             <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />  
         </property>  
   </bean >  
    cache配置  
   <bean id="methodCacheInterceptor" class="pers.lishbo.util.redis.MethodCacheInterceptor" >  
         <property name="redisUtil" ref="redisUtil" />  
   </bean >  
   <bean id="redisUtil" class="pers.lishbo.util.redis.RedisUtil" >  
         <property name="redisTemplate" ref="redisTemplate" />  
   </bean >
    需要加入缓存的类或方法  
    <bean id="methodCachePointCut"  class="org.springframework.aop.support.RegexpMethodPointcutAdvisor" >  
          <property name="advice" ref="methodCacheInterceptor"/>  
              <ref value="methodCacheInterceptor" />  
          </property>  
          <property name="patterns" >  
              <list>  
               确定正则表达式列表  
               pers.lishbo.aservice.commonservice.impl.CutDataSourceServiceImpl
                 <value>pers\.lishbo\.aservice\.*service\.impl\...*ServiceImpl.*</value >  
              </list>  
          </property>  
    </bean >  
	 -->
	
	
	
	
	
	
</beans>