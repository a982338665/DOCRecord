<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" version="2.5">
  <display-name></display-name>
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
			classpath*:ApplicationContext*.xml
		</param-value>
  </context-param>
  <context-param>
    <param-name>resteasy.providers</param-name>
    <param-value>pers.lishbo.exception.RestExceptionHandler</param-value>
  </context-param>
  <listener>
    <listener-class>
            org.jboss.resteasy.plugins.server.servlet.ResteasyBootstrap
        </listener-class>
  </listener>
  <listener>
    <listener-class>
            org.jboss.resteasy.plugins.spring.SpringContextLoaderListener
        </listener-class>
  </listener>
   <!-- 解决乱码的过滤器=========================== -->
  <!-- CharacterEncodingFilter类具有encoding和forceEncoding两个属性，
  其中encoding是表示设置request的编码，forceEncoding表示是否同时设置response的编码。 -->
  <!--forceEncoding=true是意思是指无论客户端请求是否包含了编码，都用过滤器里的编码来解析请求  -->
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>pers.lishbo.filter.CharacterEncodingFilter</filter-class>
  <!--   <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param> -->
  </filter>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <!-- ============================================ -->
<filter>
	    <filter-name>LogTimeFilter</filter-name>
	    <filter-class>pers.lishbo.filter.LogTimeFilter</filter-class>
	    <init-param>
	      <param-name>encoding</param-name>
	      <param-value>UTF-8</param-value>
	    </init-param>
	    <init-param>
	      <param-name>logFlag</param-name>
	      <param-value>true</param-value>
	    </init-param>
	    <init-param>
	      <param-name>timeDebug</param-name>
	      <param-value>1000</param-value>
	    </init-param>
	    <init-param>
	      <param-name>timeInfo</param-name>
	      <param-value>2000</param-value>
	    </init-param>
	    <init-param>
	      <param-name>timeError</param-name>
	      <param-value>8000</param-value>
	    </init-param>
	</filter>
	<filter-mapping>
		<!-- 访问地址调用时间的日志过滤器，仅有一个功能 -->
		<!-- 若为接口则是接口的调用所需时间过滤器 -->
	    <filter-name>LogTimeFilter</filter-name>
	    <!-- 此处配置为接口访问时记录，页面访问不计时  -->
	    <!-- <url-pattern>/*</url-pattern> -->
	    <url-pattern>*.rest</url-pattern>
	</filter-mapping>
  <!-- ==============此servlet用来直接调用的接口（restful风格）============================== -->
  <servlet>
    <servlet-name>SpringRestful</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/ApplicationContext.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>SpringRestful</servlet-name>
    <!-- <url-pattern>/*</url-pattern> --><!-- 此处的配置决定了是否是restful风格的接口 -->
    <url-pattern>*.rest</url-pattern>     <!-- 将以.rest结尾的所有东西交由servlet处理(需要在controller中的path路径加.rest后缀才能直接调用)-->
  </servlet-mapping>
    <!-- ============此servlet用来前后台交互时调用的接口（*.do）============================== -->
     <servlet>
    <servlet-name>SpringDO</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/ApplicationContext.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>SpringDO</servlet-name>
    <!-- <url-pattern>/*</url-pattern> --><!-- 此处的配置决定了是否是restful风格的接口 -->
    <url-pattern>*.do</url-pattern>     <!-- 将以.rest结尾的所有东西交由servlet处理(需要在controller中的path路径加.rest后缀才能直接调用)-->
  </servlet-mapping>
    <!-- =========================================================================== -->
  <welcome-file-list>
    <welcome-file>/webpage/page/index.jsp</welcome-file>
  </welcome-file-list>
  <!-- ============================================ -->
 		<!-- 配置项目根路径 -->
 		<context-param>  
            <param-name>webAppRootKey</param-name>    
            <param-value>webapp.root</param-value>    
        </context-param>   
        <!-- 配置log4j配置文件路径 --> 
        <context-param>  
                    <param-name>log4jConfigLocation</param-name>  
                    <param-value>classpath:log4j.properties</param-value>  
        </context-param>   
        <!--  60s 检测日志配置 文件变化   -->
        <context-param>  
                    <param-name>log4jRefreshInterval</param-name>  
                    <param-value>6000</param-value>  
        </context-param>  
        <!--   配置Log4j监听器  -->
        <listener>  
                   <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>  
        </listener>  
</web-app>